#!/bin/bash
source /sbin/npiv-common

##############################################################################
#Read config file into global arrays with arr_index set to their sizes
read_config_file() {
    declare -g -a wwnn_arr wwpn_arr vwwnn_arr vwwpn_arr aas_arr das_arr fn_arr
    arr_index=0
    while read wwnn_arr[$arr_index] wwpn_arr[$arr_index] vwwnn_arr[$arr_index]\
               vwwpn_arr[$arr_index] aas_arr[$arr_index] das_arr[$arr_index]\
               fn_arr[$arr_index]; do
        check_for_comment "${wwnn_arr[$arr_index]}"
        [ $? -ne 0 ] && let arr_index+=1
    done < /etc/sysconfig/npiv
}

##############################################################################
#Writes line out from an entry in global arrays created by read_config_file
#Currently there may be a loss of formatting for comments in the cfg file
write_line_from_array_index() {
    [ -n ${wwwn_arr[$1]} ]    && echo -n "${wwnn_arr[$1]}" 
    [ -n "${wwpn_arr[$1]}" ]  && echo -n " ${wwpn_arr[$1]}" 
    [ -n "${vwwnn_arr[$1]}" ] && echo -n " ${vwwnn_arr[$1]}" 
    [ -n "${vwwpn_arr[$1]}" ] && echo -n " ${vwwpn_arr[$1]}" 
    [ -n "${aas_arr[$1]}" ]   && echo -n " ${aas_arr[$1]}" 
    [ -n "${das_arr[$1]}" ]   && echo -n " ${das_arr[$1]}" 
    [ -n "${fn_arr[$1]}" ]    && echo -n " ${fn_arr[$1]}"
    echo
}

##############################################################################
#Reads config file, and adds new entry to it - if that there isn't already a
#duplicate entry
add_entry() {
    local x=0
    read_config_file
    while [ $x -lt $arr_index ];do
        [ "${wwnn_arr[$x]}" = "$1" -a "${wwpn_arr[$x]}" = "$2" -a \
             "${vwwnn_arr[$x]}" = "$3" -a "${vwwpn_arr[$x]}" = "$4" ] &&
            exit_with_error "Entry already present for $1 $2 $3 $4"
        [ "${fn_arr[$x]}" = "$7" ] && exit_with_error "Friendly name \"$7\" already exists"
        let x+=1
    done
    #wwnn wwpn vwwnn vwwpn aasflag dasflag friendly_name
    echo "$1" "$2" "$3" "$4" "$5" "$6" "$7" >> /etc/sysconfig/npiv
}

##############################################################################
#takes elements of wwnn:wwpn vwwnn vwwpn or a friendly name
#reads config file and tries to find the corresponding entry
#if found cfg file is re-written without that entry
delete_entry() {
    local by_fname=0 by_wwn=0
    [ "$1" = "by_fname" ] && by_fname=1
    [ "$1" = "by_wwn" ] && by_wwn=1
    [ $by_fname -eq 0 -a $by_wwn -eq 0 ] && 
        exit_with_error "Internal error delete entry called incorrectly"

    shift 1

    read_config_file
    local x=0 selected_entry=-1
    while [ $x -lt $arr_index ];do
        if [ $by_wwn -eq 1 ]; then
            if [ "${wwnn_arr[$x]}"  = "$1" -a "${wwpn_arr[$x]}"  = "$2" -a \
                 "${vwwnn_arr[$x]}" = "$3" -a "${vwwpn_arr[$x]}" = "$4" ]; then
                selected_entry=$x
                break
            fi
        fi
        if [ $by_fname -eq 1 ];then
            if [ "${fn_arr[x]}" = "$1" ]; then
                selected_entry=$x
                break
            fi
        fi
        let x+=1
    done

    #works for by_fname as well since 2,3,4 are empty
    [ $selected_entry -eq -1 ] && exit_with_error \
          "No entry found for: $1 $2 $3 $4" 

    x=0
    while [ $x -lt $arr_index ];do
        [ $x -ne $selected_entry ] &&
            write_line_from_array_index $x
        let x+=1
    done > /etc/sysconfig/npiv
}


##############################################################################
#Begin Main Body
O1=${1,,[A-Z]}

case $O1 in
    activate)
        shift 1
        if [ "${1:0:4}" = "-fn=" ]; then
            fname=${1#-fn=}
            read_config_file
            x=0
            while [ $x -lt ${#fn_arr[*]} ]; do
                if [ "${fn_arr[$x]}" = "$fname" ]; then
                    configure_vport "enable" "${wwnn_arr[$x]}" "${wwpn_arr[$x]}" "${vwwnn_arr[$x]}" "${vwwpn_arr[$x]}"
                    break
                fi
                let x+=1
            done
        else
            [ $# -ne 4 ] && invalid_usage
            wwnn=$(validate_and_reformat_wwn "$1")
            [ $? -ne 0 ] &&  exit_with_error "Bad wwnn: $1"
            wwpn=$(validate_and_reformat_wwn "$2")
            [ $? -ne 0 ] &&  exit_with_error "Bad wwpn: $2"
            vwwnn=$(validate_and_reformat_wwn "$3")
            [ $? -ne 0 ] &&  exit_with_error "Bad vwwnn: $3"
            vwwpn=$(validate_and_reformat_wwn "$4")
            [ $? -ne 0 ] &&  exit_with_error "Bad vwwpn: $4"
            configure_vport "enable" "$wwnn" "$wwpn" "$vwwnn" "$vwwpn"
        fi
        ;;
    configure)
                shift 1
                nowflag=0
                aasflag="y"
                dasflag="y"
                fname=""
                while [ $# -gt 0 -a "${1:0:1}" = "-" ]; do

                    arg="${1,,[A-Z]}"    #force lower case

                    if [ "$arg" = "-now" ]; then
                        nowflag=1
                        shift 1
                        continue;
                    fi

                    #valid argument will produce empty string
                    checkfmt="${1/?*=?*/}"
                    [ ${#checkfmt} -ne 0 ] && exit_with_error "Invalid option format: $1"

                    argname="${arg%%=*}" #prefix before =
                    argval="${arg##*=}"  #suffix after =

                    case "$argname" in
                        -fn) #friendly name
                            fname="$argval"
                            ;;
                        -aas) #activate at startup flag
                            aasflag="$argval"
                            [ "$aasflag" != "y" -a "$aasflag" != "n" ] &&
                                exit_with_error "Bad -aas flag: $aasflag"
                            ;;
                        -das) #deactivate at stop flag
                            dasflag="$argval"
                            [ "$dasflag" != "y" -a "$dasflag" != "n" ] &&
                                exit_with_error "Bad -das value: $dasflag"
                            ;;
                        *)
                            echo "unknown option $1"
                            echo
                            invalid_usage
                            ;;
                    esac
                    shift 1
                done

                [ $# -ne 4 ] && invalid_usage
                wwnn=$(validate_and_reformat_wwn "$1")
                [ $? -ne 0 ] &&  exit_with_error "Bad wwnn: $1"
                wwpn=$(validate_and_reformat_wwn "$2")
                [ $? -ne 0 ] &&  exit_with_error "Bad wwpn: $2"
                vwwnn=$(validate_and_reformat_wwn "$3")
                [ $? -ne 0 ] &&  exit_with_error "Bad vwwnn: $3"
                vwwpn=$(validate_and_reformat_wwn "$4")
                [ $? -ne 0 ] &&  exit_with_error "Bad vwwpn: $4"

                add_entry "$wwnn" "$wwpn" "$vwwnn" "$vwwpn" "$aasflag" "$dasflag" "$fname"
                [ $nowflag -eq 1 ] && configure_vport "enable" "$wwnn" "$wwpn" "$vwwnn" "$vwwpn"
                ;;
    deactivate)
        shift 1
        if [ "${1:0:4}" = "-fn=" ]; then
            fname=${1#-fn=}
            read_config_file
            x=0
            while [ $x -lt ${#fn_arr[*]} ]; do
                if [ "${fn_arr[$x]}" = "$fname" ]; then
                    configure_vport "disable" "${wwnn_arr[$x]}" "${wwpn_arr[$x]}" "${vwwnn_arr[$x]}" "${vwwpn_arr[$x]}"
                    break
                fi
                let x+=1
            done
        else
            [ $# -ne 4 ] && invalid_usage
            wwnn=$(validate_and_reformat_wwn "$1")
            [ $? -ne 0 ] &&  exit_with_error "Bad wwnn: $1"
            wwpn=$(validate_and_reformat_wwn "$2")
            [ $? -ne 0 ] &&  exit_with_error "Bad wwpn: $2"
            vwwnn=$(validate_and_reformat_wwn "$3")
            [ $? -ne 0 ] &&  exit_with_error "Bad vwwnn: $3"
            vwwpn=$(validate_and_reformat_wwn "$4")
            [ $? -ne 0 ] &&  exit_with_error "Bad vwwpn: $4"
            configure_vport "disable" "$wwnn" "$wwpn" "$vwwnn" "$vwwpn"
        fi
        ;;
    info)
        O2=${2,,[A-Z]}
        [ ${#O2} -gt 0 -a "$O2" != "adapters" -a "$O2" != "vadapters" ] &&
           invalid_usage 
        adapters=$(get_all_hosts)
        for adapter in $adapters; do
            port_type=$(cat $adapter/port_type)
            pt=${port_type,,[A-Z]}
            pt=${pt/npiv/}
            [ ${#pt} != ${#port_type} -a "$O2" = "adapters" ] && 
                continue #skip virtual npiv hosts on adapters info
            [ ${#pt} = ${#port_type} -a "$O2" = "vadapters" ] && 
                continue #skip base hosts on vadapters info
            echo $adapter
            node_name=$(validate_and_reformat_wwn $(cat $adapter/node_name))
            echo node_name=$node_name
            port_name=$(validate_and_reformat_wwn $(cat $adapter/port_name))
            echo port_name=$port_name
            [ -f $adapter/supported_speeds ] && 
                echo supported_speeds=$(cat $adapter/supported_speeds)
            port_state=$(cat $adapter/port_state)
            echo port_state=$port_state
            if [ ${port_state,,[A-Z]} != "linkdown" ]; then
                echo port_type=$port_type
                echo fabric_name=$(cat $adapter/fabric_name)
                echo current_speed=$(cat $adapter/speed)
            fi
            if [ "$O2" = "vadapters" ]; then
                udev_full_path=$(udevadm info -q path -p $adapter)
                udev_path=${udev_full_path%%/vport*}
                udev_path=${udev_path##*/}
                parent="/sys/class/fc_host/$udev_path"
                echo "parent: $parent"
                parent_wwnn=$(validate_and_reformat_wwn $(cat $parent/node_name))
                parent_wwpn=$(validate_and_reformat_wwn $(cat $parent/port_name))
                echo "parent wwnn:wwpn $parent_wwnn:$parent_wwpn"
                read_config_file
                x=0
                while [ $x -lt $arr_index ]; do
                    if [ "${wwnn_arr[$x]}" = "$parent_wwnn" -a "${wwpn_arr[$x]}" = "$parent_wwpn" -a \
                         "${vwwnn_arr[$x]}" = "$node_name" -a "${vwwpn_arr[$x]}" = "$port_name" ]; then
                        [ ${#fn_arr} -gt 0 ] && echo "friendly name: ${fn_arr[$x]}"
                    fi
                    let x+=1
                done
            fi
            echo
        done
        ;;
    show)
        O2=${2,,[A-Z]}
        case $O2 in
            configured)
                read_config_file
                x=0
                while [ $x -lt $arr_index ]; do
                    check_for_comment "${wwnn_arr[$x]}"
                    [ $? -ne 0 ] && write_line_from_array_index $x
                    let x+=1
                done
                ;;
            active)
                npiv_hosts=$(get_virtual_npiv_hosts)
                read_config_file
                for npiv_host in $npiv_hosts; do
                    udev_full_path=$(udevadm info -q path -p $npiv_host)
                    udev_path=${udev_full_path%%/vport*}
                    udev_path=${udev_path##*/}
                    parent="/sys/class/fc_host/$udev_path"
                    parent_wwnn=$(validate_and_reformat_wwn $(cat $parent/node_name))
                    parent_wwpn=$(validate_and_reformat_wwn $(cat $parent/port_name))
                    read wwnn < $npiv_host/node_name
                    wwnn=$(validate_and_reformat_wwn $wwnn)
                    read wwpn < $npiv_host/port_name
                    wwpn=$(validate_and_reformat_wwn $wwpn)
                    echo "npiv host  : ${npiv_host##*/} wwnn:$wwnn wwpn:$wwpn"
                    echo "parent host: ${parent##*/} wwnn:$parent_wwnn wwpn:$parent_wwpn"
                    x=0
                    while [ $x -lt $arr_index ]; do
                        if [ "${wwnn_arr[$x]}" = "$parent_wwnn" -a "${wwpn_arr[$x]}" = "$parent_wwpn" -a \
                             "${vwwnn_arr[$x]}" = "$wwnn" -a "${vwwpn_arr[$x]}" = "$wwpn" ]; then
                            [ ${#fn_arr} -gt 0 ] && echo "friendly name: ${fn_arr[$x]}"
                        fi
                        let x+=1
                    done
                    echo
                done
                ;;
            *)
                invalid_usage
                ;;
        esac
        ;;
    unconfigure)
        shift 1
        nowflag=0
        fname=""
        while [ $# -gt 0 -a "${1:0:1}" = "-" ]; do

            arg="${1,,[A-Z]}"    #force lower case

            if [ "$arg" = "-now" ]; then
                nowflag=1
                shift
                continue;
            fi

            #valid argument will produce empty string
            checkfmt="${1/?*=?*/}"
            [ ${#checkfmt} -ne 0 ] && 
                exit_with_error "Invalid option format: $1"

            argname="${arg%%=*}" #prefix before =
            argval="${arg##*=}"  #suffix after =

            case "$argname" in
                -fn) #friendly name
                    fname="$argval"
                    ;;
                *)
                    echo "unknown option $1"
                    echo
                    invalid_usage
                    ;;
            esac
            shift 1
        done

        if [ "$fname" = "" ]; then
            [ $# -ne 4 ] && invalid_usage
            wwnn=$(validate_and_reformat_wwn "$1")
            [ $? -ne 0 ] &&  exit_with_error "Bad wwnn: $1"
            wwpn=$(validate_and_reformat_wwn "$2")
            [ $? -ne 0 ] &&  exit_with_error "Bad wwpn: $2"
            vwwnn=$(validate_and_reformat_wwn "$3")
            [ $? -ne 0 ] &&  exit_with_error "Bad vwwnn: $3"
            vwwpn=$(validate_and_reformat_wwn "$4")
            [ $? -ne 0 ] &&  exit_with_error "Bad vwwpn: $4"
            delete_entry "by_wwn" "$wwnn" "$wwpn" "$vwwnn" "$vwwpn"
            configure_vport "disable" "$wwnn" "$wwpn" "$vwwnn" "$vwwpn"
        else
            delete_entry "by_fname" "$fname"
            #declare -g -a wwnn_arr wwpn_arr vwwnn_arr vwwpn_arr aas_arr das_arr fn_arr
            if [ $nowflag -eq 1 ]; then
            x=0
            while [ $x -lt ${#fn_arr[*]} ]; do
                if [ "${fn_arr[$x]}" = "$fname" ]; then
                    configure_vport "disable" "${wwnn_arr[$x]}" "${wwpn_arr[$x]}" "${vwwnn_arr[$x]}" "${vwwpn_arr[$x]}"
                    echo configure_vport "disable" "${wwnn_arr[$x]}" "${wwpn_arr[$x]}" "${vwwnn_arr[$x]}" "${vwwpn_arr[$x]}"
                    break
                fi
                let x+=1
            done
            fi
        fi
        ;;
    *) 
        echo "Unknown option: $1"
        echo
        invalid_usage
        ;;
esac
